@startuml
skinparam classAttributeIconSize 0



enum Niveau <<enumeration >> {
  1
  2
  3
}

enum Jeton <<enumeration >> {
  Blanc
  Vert
  Perle
  Bleu
  Or
  Rouge
  Noir
}

enum Capacite <<enumeration >> {
  Rejouer
  Prendre_privilege
  Prendre_jeton_adversaire
  Prendre_jeton_plateau
  Cameleon
}

struct TupleIntJeton {
  nombre : int
  type_jeton : Jeton
}

class SplendorDuel {

  + lancerPartie() : void
  + finirPartie(): void
}

note left of Joueur : privilege entre 0 et 3

class Joueur {
  - nom : string
  - privilege :int 
  - {field} jetons : List[TupleIntJeton]

  + reserverCarte(Carte carte)
  + acheterCarte()
  + ajouterJeton(Jeton jeton)
  + depenserJeton(Jeton jeton)
  + utiliserPrivilege(privilege)
}

note right of CarteJoaillerie : point de prestige entre 0 et 4\ncouronne entre 0 et 2
class CarteJoaillerie <<abstract>>{
  - niveau : Niveau
  - bonus : Jeton
  - point_de_prestige : int
  - capacite : Capacite
  - {field} cout : List[TupleIntJeton]
  - couronne : int
}

note right of CarteRoyale :  point de prestige 2 ou 3
class CarteRoyale {
  - point_de_prestige : int
  - capacite : Capacite
}

class SacJeton{
  - {field} jetons : List[TupleIntJeton]

}


class Plateau{
  - {field} grille : List[List[Jeton]]
}

class LigneDeCarte{
  niveau : Niveau
}


SplendorDuel "1" -- "2" Joueur : < joue
SplendorDuel "1" -- "1" Plateau : se joue sur >
SplendorDuel "1" -- "1" SacJeton : se joue avec >
SplendorDuel "1" -- "*" CarteJoaillerie : se joue avec >


SplendorDuel "1" -- "4" CarteRoyale : se joue avec 
SplendorDuel "1" -- "3" LigneDeCarte : se joue avec
LigneDeCarte "3" -- "*" CarteJoaillerie : < est empilée
LigneDeCarte "3" -- "*" CarteJoaillerie : < est découverte


Joueur "0..1" -- "0..*" CarteJoaillerie : posseder >
' CarteJoaillerie <|-- CarteNiveau1
' CarteJoaillerie <|-- CarteNiveau2
' CarteJoaillerie <|-- CarteNiveau3

Joueur "0..1" -- "0..2" CarteRoyale : posseder >


@enduml



