@startuml
'skinparam classAttributeIconSize 0

enum Niveau <<enumeration >> {
  1
  2
  3
}

enum Couleur <<enumeration >> {
  BLANC
  VERT
  PERLE
  BLEU
  OR
  ROUGE
  NOIR
}

namespace JetonsPrivilegePlateau {

class Jeton {
   -couleur : Couleur
   +Jeton(jeton : const Jeton)
   +Jeton(couleur: Couleur)
   +getCouleur() : Couleur
}

class Privilege{
}

class SacJeton{
  -jetons : Liste[Jeton]
  +SacJeton(total : const TokenTotaux)
  +getNbJetons() : size_t
  +addJeton(jeton : const Jeton)
  +PiocherJeton() : const Jeton
  +estVide() : bool
}
note bottom of SacJeton : Le sac de jeton est unique, pas de duplication

class JetonsTotaux{
   -jetons : Liste[Jeton]
   -max_or : const size_t
   -max_rouge : const size_t
   -max_noir : const size_t
   -max_bleu : const size_t
   -max_perle : const size_t
   -max_vert : const size_t
   -max_blanc : const size_t
   {fi+TokenTotaux()
   +~TokenTotaux
   +getNbJetons : size_t
   +getJeton : const Jeton
}
note bottom of JetonsTotaux: Le total initial est unique, pas de duplication

class PrivilegesTotaux{
   -privileges : Liste[Privilege]
   +PrivilegesTotaux()
   +~PrivilegesTotaux()
   +getNbPrivileges() : size_t
   +getPrivilege() : const Privilege
}
note bottom of PrivilegesTotaux: pas de duplication du total

class Plateau{
   -tokens : Liste[Liste[Jeton]]
   -privileges : Liste[Privilege]
   +Plateau(sac: SacJeton, privileges: const PrivilegesTotaux)
   +takeToken(i : size_t, j : size_t) : const Jeton
   +showBoard()
   +takePrivilege() : const Privilege
   +placerJeton(jeton : const Jeton)
   +placerPrivilege(privilege : const Privilege)
   +remplirPlateau(sac: SacJeton)
   +estVideo() : bool
}
note bottom of Plateau: pas de duplication du plateau


' struct TupleIntJeton {
'   nombre : int
'   type_jeton : Jeton
' }

'class CoordonneeJeton{
'  x : int
'  y : int
'}
}

enum Capacite <<enumeration >> {
  Rejouer
  Prendre_privilege
  Prendre_jeton_adversaire
  Prendre_jeton_plateau
  Cameleon
}
namespace GestionPartie{

class SplendorDuel {
  - joueurs : Liste[Joueur]
  - environnement : Environnement
  - joueur_courant : Joueur
  - tour : uint
  + lancerPartie() : void
  + finirPartie(): void
}
class Environnement{
    - plateau : Plateau
    - sac : SacJeton
    - cartes_pyramide : CartesPyramide
    - cartes_royales : Liste[CarteRoyale]
    - cartes_joaillerie : Liste[CarteJoaillerie]
    -jetons : Liste[Jeton]
    -privileges : Liste[Privilege]
}
}
namespace JoueurHumainIA {

class Joueur {
  - nom : string
  - privilege :int 
  '- {field} jetons : List[TupleIntJeton]

  + reserverCarte(Carte carte)
  + acheterCarte()
  + ajouterJeton(Jeton jeton)
  + depenserJeton(Jeton jeton)
  + utiliserPrivilege(privilege)
}
note bottom of Joueur : privilege entre 0 et 3

class Humain{}
class IA{}
}

namespace GestionCartes{
class CarteJoaillerie <<abstract>>{
  - niveau : uint
  - bonus : Bonus
  - point_de_prestige : uint
  - capacite : Capacite
  - {field} cout : Liste[int]
  - couronne : int
  +CarteJoaillerie(niveau : Niveau, bonus : Couleur, point_de_prestige : int, capacite : Capacite, cout : Liste[int], couronne : int)
  +getNiveau() : uint
  +getBonus() : Bonus
  +getCompetence() : Capacite
  +getPrestige() : uint
  +getCout() : Liste[int]
  +getCouronne() : uint
}
note bottom of CarteJoaillerie : point de prestige entre 0 et 4\ncouronne entre 0 et 2


class CarteRoyale {
  - point_de_prestige : uint
  - capacite : Capacite
  +CarteRoyale(point_de_prestige : int, capacite : Capacite)
  +getPrestige() : uint
  +getCompetence() : Capacite
}
note bottom of CarteRoyale :  point de prestige 2 ou 3\ncouronnes nécessaire entre 3 ou 6


class DeckNv1{
  - pioche : Liste[CarteJoaillerie]
}

class DeckNv2{
  - pioche : Liste[CarteJoaillerie]
}

class DeckNv3{
  - pioche : Liste[CarteJoaillerie]
}

class CartesPyramide{
    - niveau1 : Liste[CarteJoaillerie]
    - niveau2 : Liste[CarteJoaillerie]
    - niveau3 : Liste[CarteJoaillerie]
    +CartesPyramide(deck1 : DeckNv1, deck2 : DeckNv2, deck3 : DeckNv3)
    +piocherCarte(niveau : uint) : const CarteJoaillerie
    +remplirPyramide(deck1 : DeckNv1, deck2 : DeckNv2, deck3 : DeckNv3)
}
}

SplendorDuel "1" -- "2" Joueur : < joue
SplendorDuel "1" -- "1" Plateau : se joue sur >
SplendorDuel "1" -- "1" SacJeton : se joue avec >
SplendorDuel "1" -- "*" CarteJoaillerie : se joue avec >
SplendorDuel "1" -- "4" CarteRoyale : se joue avec >

Jeton "0..25" --* JetonsTotaux : est contenu dans >
Privilege "0..3" --* PrivilegesTotaux : est contenu dans >
Jeton "0..10" -- "0..1" Joueur : possède <
Jeton "0..25" --o "0..1" SacJeton : est composé de <
Jeton "0..25" --o "1" Plateau : est placé sur >
Privilege "0..3" --o "0..1" Plateau : est placé sur >

IA --|> Joueur
Humain --|> Joueur
'CoordonneeJeton "0..25" --  "1" Plateau
'CoordonneeJeton "0..1" -- "1" Jeton

Joueur "0..1" -- "0..*" CarteJoaillerie : possède >
' CarteJoaillerie <|-- CarteNiveau1
' CarteJoaillerie <|-- CarteNiveau2
' CarteJoaillerie <|-- CarteNiveau3

Joueur "0..1" -- "0..2" CarteRoyale : possède >


@enduml
